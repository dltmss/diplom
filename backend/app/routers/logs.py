# app/routers/logs.py

from fastapi import APIRouter, Depends, HTTPException, status
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select

from app.database import get_db
from app.models import DataLog
from app.schemas import DataLogCreate, DataLogRead
from app.auth import get_current_user, require_role

router = APIRouter()


# üîê admin –∏ superadmin –º–æ–≥—É—Ç —Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –ª–æ–≥–∏
@router.get(
    "/",
    response_model=list[DataLogRead],
    summary="–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ª–æ–≥–∏ (—Ç–æ–ª—å–∫–æ admin –∏ superadmin)",
)
async def get_logs(
    db: AsyncSession = Depends(get_db),
    user=Depends(require_role(["admin", "superadmin"])),
):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö DataLog, —Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º.
    """
    result = await db.execute(select(DataLog).order_by(DataLog.id.desc()))
    return result.scalars().all()


# üîê –ª—é–±–æ–π –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å –ª–æ–≥–∞
@router.post(
    "/",
    response_model=DataLogRead,
    status_code=status.HTTP_201_CREATED,
    summary="–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –ª–æ–≥–∞",
)
async def create_log(
    data: DataLogCreate,
    db: AsyncSession = Depends(get_db),
    user=Depends(get_current_user),
):
    """
    –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ –≤ —Ç–∞–±–ª–∏—Ü—É data_logs.
    –ü–æ–ª—è user_fullname –∏ user_role –±–µ—Ä—É—Ç—Å—è –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è,
    created_at –∑–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞ —É—Ä–æ–≤–Ω–µ –ë–î.
    """
    log = DataLog(
        user_id=user.id,
        user_fullname=user.fullname,
        user_role=user.role,          # ‚Üê –¥–æ–±–∞–≤–ª—è–µ–º —Ä–æ–ª—å
        action=data.action,
        parameter=data.parameter,
        file_name=data.file_name,
        # created_at –∑–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è DEFAULT now() –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    )
    db.add(log)
    await db.commit()
    await db.refresh(log)
    return log


# üîê —Ç–æ–ª—å–∫–æ superadmin –º–æ–∂–µ—Ç —É–¥–∞–ª–∏—Ç—å –æ–¥–Ω—É –∑–∞–ø–∏—Å—å
@router.delete(
    "/{log_id}",
    status_code=status.HTTP_204_NO_CONTENT,
    summary="–£–¥–∞–ª–∏—Ç—å –æ–¥–Ω—É –∑–∞–ø–∏—Å—å –ª–æ–≥–∞ (—Ç–æ–ª—å–∫–æ superadmin)",
)
async def delete_log(
    log_id: int,
    db: AsyncSession = Depends(get_db),
    user=Depends(require_role(["superadmin"])),
):
    """
    –£–¥–∞–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –ª–æ–≥–∞ –ø–æ –µ—ë ID.
    """
    result = await db.execute(select(DataLog).where(DataLog.id == log_id))
    log = result.scalar_one_or_none()
    if not log:
        raise HTTPException(status_code=404, detail="–õ–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
    await db.delete(log)
    await db.commit()


# üîê —Ç–æ–ª—å–∫–æ superadmin –º–æ–∂–µ—Ç –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –ª–æ–≥–∏
@router.delete(
    "/",
    status_code=status.HTTP_204_NO_CONTENT,
    summary="–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –ª–æ–≥–∏ (—Ç–æ–ª—å–∫–æ superadmin)",
)
async def delete_all_logs(
    db: AsyncSession = Depends(get_db),
    user=Depends(require_role(["superadmin"])),
):
    """
    –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É data_logs.
    """
    await db.execute(DataLog.__table__.delete())
    await db.commit()
